{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","cn","completed","title","TodoList","todos","map","username","userId","App","useState","todosFromServer","setTodos","setTitle","setUserId","hasErrorTitle","setHasErrorTitle","hasErrorUserId","setHasErrorUserId","preparedTodos","usersFromServer","find","findUser","handleSubmit","event","preventDefault","Math","max","action","method","onSubmit","htmlFor","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a81b4dec.chunk.js","sourcesContent":["import { UserType } from '../types';\n\ntype Props = {\n  user: UserType | null\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n      {user?.name}\n    </a>\n  );\n};\n","import cn from 'classnames';\nimport { TodoType } from '../types';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: TodoType,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={cn('TodoInfo', {\n        'TodoInfo--completed': todo.completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n      <UserInfo user={todo.user} />\n    </article>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\nimport { TodoType } from '../types';\n\ntype Props = {\n  todos: TodoType[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import './App.scss';\nimport { useState } from 'react';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nexport const App = () => {\n  const [todos, setTodos] = useState(todosFromServer);\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [hasErrorTitle, setHasErrorTitle] = useState(false);\n  const [hasErrorUserId, setHasErrorUserId] = useState(false);\n\n  const preparedTodos = todos.map(todo => ({\n    ...todo,\n    user: usersFromServer.find(findUser => findUser.id === todo.userId) || null,\n  }));\n\n  const reset = () => {\n    setTitle('');\n    setUserId(0);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (title && userId) {\n      setTodos([\n        ...todos,\n        {\n          id: Math.max(...todos.map(todo => todo.id)) + 1,\n          title,\n          completed: false,\n          userId,\n        },\n      ]);\n      reset();\n    }\n\n    setHasErrorTitle(!title);\n    setHasErrorUserId(!userId);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={(event) => handleSubmit(event)}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            name=\"title\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={(event) => setTitle(event.target.value)}\n          />\n          {(hasErrorTitle && !title)\n            && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">User: </label>\n          <select\n            name=\"userSelect\"\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={(event) => setUserId(+event.target.value)}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option key={user.id} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {(hasErrorUserId && !userId)\n            && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={preparedTodos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}